{"version":3,"sources":["app/views/Drag&Drop/SimpleListDnD.jsx","app/views/Drag&Drop/SimpleHorizontalList.jsx","app/views/Drag&Drop/TwoListDnD.jsx","app/views/Drag&Drop/AppDragAndDrop.jsx"],"names":["SimpleListDnD","useState","item","setItem","useEffect","count","Array","from","length","v","k","map","id","content","onDragEnd","result","destination","tempItems","list","startIndex","endIndex","splice","removed","reorder","source","index","droppableId","provided","snapshot","droppableProps","ref","innerRef","style","isDraggingOver","borderRadius","background","padding","width","key","draggableId","draggableProps","dragHandleProps","isDragging","draggableStyle","userSelect","grid","margin","boxShadow","placeholder","SimpleHorizontalList","direction","display","overflow","getItems","offset","getItemStyle","theme","shadows","getListStyle","TwoListDnD","items","setItems","selected","setSelected","useTheme","getList","droppableSource","droppableDestination","sourceClone","destClone","move","droppable","droppable2","className","AppDragAndDrop","routeSegments","name","path","title"],"mappings":"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","file":"static/js/32.88bdeb20.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\n\n// fake data generator\nconst getItems = (count) =>\n    Array.from({ length: count }, (v, k) => k).map((k) => ({\n        id: `item-${k}`,\n        content: `item ${k}`,\n    }))\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list)\n    const [removed] = result.splice(startIndex, 1)\n    result.splice(endIndex, 0, removed)\n\n    return result\n}\n\nconst grid = 8\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n    // some basic styles to make the items look a bit nicer\n    userSelect: 'none',\n    padding: grid * 2,\n    margin: `0 0 ${grid}px 0`,\n    boxShadow: 'var(--elevation-z4)',\n    borderRadius: '4px',\n    // change background colour if dragging\n    background: isDragging ? 'var(--primary)' : 'var(--bg-paper)',\n\n    // styles we need to apply on draggables\n    ...draggableStyle,\n})\n\nconst getListStyle = (isDraggingOver) => ({\n    borderRadius: '4px',\n    background: isDraggingOver ? 'rgba(0,0,0, .1)' : 'var(--bg-default)',\n    padding: grid,\n    width: 250,\n})\n\nconst SimpleListDnD = () => {\n    const [item, setItem] = useState([])\n\n    useEffect(() => {\n        setItem(getItems(6))\n    }, [])\n\n    const onDragEnd = (result) => {\n        // dropped outside the list\n        if (!result.destination) {\n            return\n        }\n\n        const tempItems = reorder(\n            item,\n            result.source.index,\n            result.destination.index\n        )\n        setItem(tempItems)\n    }\n\n    return (\n        <DragDropContext onDragEnd={onDragEnd}>\n            <Droppable droppableId=\"droppable\">\n                {(provided, snapshot) => (\n                    <div\n                        {...provided.droppableProps}\n                        ref={provided.innerRef}\n                        style={getListStyle(snapshot.isDraggingOver)}\n                    >\n                        {item.map((item, index) => (\n                            <Draggable\n                                key={item.id}\n                                draggableId={item.id}\n                                index={index}\n                            >\n                                {(provided, snapshot) => (\n                                    <div\n                                        ref={provided.innerRef}\n                                        {...provided.draggableProps}\n                                        {...provided.dragHandleProps}\n                                        style={getItemStyle(\n                                            snapshot.isDragging,\n                                            provided.draggableProps.style\n                                        )}\n                                    >\n                                        {item.content}\n                                    </div>\n                                )}\n                            </Draggable>\n                        ))}\n                        {provided.placeholder}\n                    </div>\n                )}\n            </Droppable>\n        </DragDropContext>\n    )\n}\n\nexport default SimpleListDnD\n","import React, { useState, useEffect } from 'react'\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\n\n// fake data generator\nconst getItems = (count) =>\n    Array.from({ length: count }, (v, k) => k).map((k) => ({\n        id: `item-${k}`,\n        content: `item ${k}`,\n    }))\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list)\n    const [removed] = result.splice(startIndex, 1)\n    result.splice(endIndex, 0, removed)\n\n    return result\n}\n\nconst grid = 8\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n    // some basic styles to make the items look a bit nicer\n    userSelect: 'none',\n    padding: grid * 2,\n    margin: `0 ${grid}px 0 0`,\n    boxShadow: 'var(--elevation-z4)',\n    borderRadius: '4px',\n    // change background colour if dragging\n    background: isDragging ? 'var(--primary)' : 'var(--bg-paper)',\n\n    // styles we need to apply on draggables\n    ...draggableStyle,\n})\n\nconst getListStyle = (isDraggingOver) => ({\n    borderRadius: '4px',\n    background: isDraggingOver ? 'rgba(0,0,0, .1)' : 'var(--bg-default)',\n    display: 'flex',\n    padding: grid,\n    overflow: 'auto',\n})\n\nconst SimpleHorizontalList = () => {\n    const [item, setItem] = useState([])\n\n    useEffect(() => {\n        setItem(getItems(6))\n    }, [])\n\n    const onDragEnd = (result) => {\n        // dropped outside the list\n        if (!result.destination) {\n            return\n        }\n\n        const tempItems = reorder(\n            item,\n            result.source.index,\n            result.destination.index\n        )\n        setItem(tempItems)\n    }\n\n    // Normally you would want to split things out into separate components.\n    // But in this example everything is just done in one place for simplicity\n    return (\n        <DragDropContext onDragEnd={onDragEnd}>\n            <Droppable droppableId=\"droppable\" direction=\"horizontal\">\n                {(provided, snapshot) => (\n                    <div\n                        ref={provided.innerRef}\n                        style={getListStyle(snapshot.isDraggingOver)}\n                        {...provided.droppableProps}\n                    >\n                        {item.map((item, index) => (\n                            <Draggable\n                                key={item.id}\n                                draggableId={item.id}\n                                index={index}\n                            >\n                                {(provided, snapshot) => (\n                                    <div\n                                        ref={provided.innerRef}\n                                        {...provided.draggableProps}\n                                        {...provided.dragHandleProps}\n                                        style={getItemStyle(\n                                            snapshot.isDragging,\n                                            provided.draggableProps.style\n                                        )}\n                                    >\n                                        {item.content}\n                                    </div>\n                                )}\n                            </Draggable>\n                        ))}\n                        {provided.placeholder}\n                    </div>\n                )}\n            </Droppable>\n        </DragDropContext>\n    )\n}\n\nexport default SimpleHorizontalList\n","import React, { useState, useEffect } from 'react'\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\nimport { useTheme } from '@material-ui/core/styles'\n\n// fake data generator\nconst getItems = (count, offset = 0) =>\n    Array.from({ length: count }, (v, k) => k).map((k) => ({\n        id: `item-${k + offset}`,\n        content: `item ${k + offset}`,\n    }))\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list)\n    const [removed] = result.splice(startIndex, 1)\n    result.splice(endIndex, 0, removed)\n\n    return result\n}\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (source, destination, droppableSource, droppableDestination) => {\n    const sourceClone = Array.from(source)\n    const destClone = Array.from(destination)\n    const [removed] = sourceClone.splice(droppableSource.index, 1)\n\n    destClone.splice(droppableDestination.index, 0, removed)\n\n    const result = {}\n    result[droppableSource.droppableId] = sourceClone\n    result[droppableDestination.droppableId] = destClone\n\n    return result\n}\n\nconst grid = 8\n\nconst getItemStyle = (isDragging, draggableStyle, theme) => ({\n    // some basic styles to make the items look a bit nicer\n    userSelect: 'none',\n    padding: grid * 2,\n    margin: `0 0 ${grid}px 0`,\n    boxShadow: theme.shadows[4],\n    borderRadius: '4px',\n    // change background colour if dragging\n    background: isDragging\n        ? 'rgba(var(--primary),1)'\n        : 'rgba(var(--bg-paper),1)',\n\n    // styles we need to apply on draggables\n    ...draggableStyle,\n})\n\nconst getListStyle = (isDraggingOver) => ({\n    borderRadius: '4px',\n    background: isDraggingOver\n        ? 'rgba(0,0,0, .1)'\n        : 'rgba(var(--bg-default),1)',\n    padding: grid,\n    width: 250,\n})\n\nconst TwoListDnD = () => {\n    const [items, setItems] = useState([])\n    const [selected, setSelected] = useState([])\n    const theme = useTheme()\n\n    useEffect(() => {\n        setItems(getItems(10))\n        setSelected(getItems(5, 10))\n    }, [])\n\n    const getList = (id) => (id === 'droppable' ? items : selected)\n\n    const onDragEnd = (result) => {\n        const { source, destination } = result\n\n        // dropped outside the list\n        if (!destination) {\n            return\n        }\n\n        if (source.droppableId === destination.droppableId) {\n            const items = reorder(\n                getList(source.droppableId),\n                source.index,\n                destination.index\n            )\n\n            if (source.droppableId === 'droppable2') {\n                setSelected(items)\n            } else setItems(items)\n        } else {\n            const result = move(\n                getList(source.droppableId),\n                getList(destination.droppableId),\n                source,\n                destination\n            )\n\n            setItems(result.droppable)\n            setSelected(result.droppable2)\n        }\n    }\n\n    return (\n        <DragDropContext onDragEnd={onDragEnd}>\n            <div className=\"flex justify-around\">\n                <Droppable droppableId=\"droppable\">\n                    {(provided, snapshot) => (\n                        <div\n                            ref={provided.innerRef}\n                            style={getListStyle(snapshot.isDraggingOver)}\n                        >\n                            {items.map((item, index) => (\n                                <Draggable\n                                    key={item.id}\n                                    draggableId={item.id}\n                                    index={index}\n                                >\n                                    {(provided, snapshot) => (\n                                        <div\n                                            ref={provided.innerRef}\n                                            {...provided.draggableProps}\n                                            {...provided.dragHandleProps}\n                                            style={getItemStyle(\n                                                snapshot.isDragging,\n                                                provided.draggableProps.style,\n                                                theme\n                                            )}\n                                        >\n                                            {item.content}\n                                        </div>\n                                    )}\n                                </Draggable>\n                            ))}\n                            {provided.placeholder}\n                        </div>\n                    )}\n                </Droppable>\n                <Droppable droppableId=\"droppable2\">\n                    {(provided, snapshot) => (\n                        <div\n                            ref={provided.innerRef}\n                            style={getListStyle(snapshot.isDraggingOver)}\n                        >\n                            {selected.map((item, index) => (\n                                <Draggable\n                                    key={item.id}\n                                    draggableId={item.id}\n                                    index={index}\n                                >\n                                    {(provided, snapshot) => (\n                                        <div\n                                            ref={provided.innerRef}\n                                            {...provided.draggableProps}\n                                            {...provided.dragHandleProps}\n                                            style={getItemStyle(\n                                                snapshot.isDragging,\n                                                provided.draggableProps.style,\n                                                theme\n                                            )}\n                                        >\n                                            {item.content}\n                                        </div>\n                                    )}\n                                </Draggable>\n                            ))}\n                            {provided.placeholder}\n                        </div>\n                    )}\n                </Droppable>\n            </div>\n        </DragDropContext>\n    )\n}\n\nexport default TwoListDnD\n","import React from 'react'\nimport SimpleListDnD from './SimpleListDnD'\nimport { Breadcrumb, SimpleCard } from 'app/components'\nimport SimpleHorizontalList from './SimpleHorizontalList'\nimport TwoListDnD from './TwoListDnD'\n\nconst AppDragAndDrop = () => {\n    return (\n        <div className=\"m-sm-30\">\n            <div className=\"mb-sm-30\">\n                <Breadcrumb\n                    routeSegments={[\n                        { name: 'others', path: '/drag-and-drop' },\n                        { name: 'Drag and Drop' },\n                    ]}\n                />\n            </div>\n            <SimpleCard title=\"Simple List Drag and Drop\">\n                <SimpleListDnD />\n            </SimpleCard>\n            <div className=\"py-3\" />\n            <SimpleCard title=\"Simple Horizontal List Drag and Drop\">\n                <SimpleHorizontalList />\n            </SimpleCard>\n            <div className=\"py-3\" />\n            <SimpleCard title=\"Simple Two List Drag and Drop\">\n                <TwoListDnD />\n            </SimpleCard>\n        </div>\n    )\n}\n\nexport default AppDragAndDrop\n"],"sourceRoot":""}