{"version":3,"sources":["app/views/material-kit/auto-complete/AutocompleteCombo.jsx","app/views/material-kit/auto-complete/AsyncAutocomplete.jsx","app/views/material-kit/auto-complete/BadgeAutocomplete.jsx","app/views/material-kit/auto-complete/AppAutoComplete.jsx"],"names":["suggestions","label","filter","createFilterOptions","AutocompleteCombo","React","useState","value","setValue","Autocomplete","className","options","getOptionLabel","option","renderInput","params","TextField","variant","fullWidth","onChange","event","newValue","inputValue","filterOptions","filtered","push","renderOption","style","width","freeSolo","getOptionDisabled","sleep","delay","Promise","resolve","setTimeout","AsyncAutocomplete","open","setOpen","setOptions","loading","length","useEffect","active","a","fetch","response","json","countries","Object","keys","map","key","item","id","onOpen","onClose","getOptionSelected","name","InputProps","endAdornment","Fragment","CircularProgress","color","size","useStyles","makeStyles","theme","root","marginTop","spacing","BadgeAutocomplete","classes","multiple","top100Films","title","defaultValue","placeholder","filterSelectedOptions","renderTags","getTagProps","index","Chip","year","AppAutoComplete","routeSegments","path"],"mappings":"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","file":"static/js/38.850c4f84.chunk.js","sourcesContent":["import React, { Fragment } from 'react'\nimport { TextField } from '@material-ui/core'\nimport { Autocomplete, createFilterOptions } from '@material-ui/lab'\n\nconst suggestions = [\n    { label: 'Afghanistan' },\n    { label: 'Aland Islands' },\n    { label: 'Albania' },\n    { label: 'Algeria' },\n    { label: 'American Samoa' },\n    { label: 'Andorra' },\n    { label: 'Angola' },\n    { label: 'Anguilla' },\n    { label: 'Antarctica' },\n    { label: 'Antigua and Barbuda' },\n    { label: 'Argentina' },\n    { label: 'Armenia' },\n    { label: 'Aruba' },\n    { label: 'Australia' },\n    { label: 'Austria' },\n    { label: 'Azerbaijan' },\n    { label: 'Bahamas' },\n    { label: 'Bahrain' },\n    { label: 'Bangladesh' },\n    { label: 'Barbados' },\n    { label: 'Belarus' },\n    { label: 'Belgium' },\n    { label: 'Belize' },\n    { label: 'Benin' },\n    { label: 'Bermuda' },\n    { label: 'Bhutan' },\n    { label: 'Bolivia, Plurinational State of' },\n    { label: 'Bonaire, Sint Eustatius and Saba' },\n    { label: 'Bosnia and Herzegovina' },\n    { label: 'Botswana' },\n    { label: 'Bouvet Island' },\n    { label: 'Brazil' },\n    { label: 'British Indian Ocean Territory' },\n    { label: 'Brunei Darussalam' },\n]\n\nconst filter = createFilterOptions()\n\nconst AutocompleteCombo = () => {\n    const [value, setValue] = React.useState(null)\n\n    const handleChange = (event, newValue) => {\n        if (newValue && newValue.inputValue) {\n            setValue({\n                label: newValue.inputValue,\n            })\n            return\n        }\n        setValue(newValue)\n    }\n\n    const filterOptions = (options, params) => {\n        const filtered = filter(options, params)\n        if (params.inputValue !== '') {\n            filtered.push({\n                inputValue: params.inputValue,\n                label: `Add \"${params.inputValue}\"`,\n            })\n        }\n        return filtered\n    }\n\n    return (\n        <Fragment>\n            <Autocomplete\n                className=\"mb-4 w-300\"\n                options={suggestions}\n                getOptionLabel={(option) => option.label}\n                renderInput={(params) => (\n                    <TextField\n                        {...params}\n                        label=\"Combo box\"\n                        variant=\"outlined\"\n                        fullWidth\n                    />\n                )}\n            />\n\n            <Autocomplete\n                className=\"mb-4 w-300\"\n                value={value}\n                onChange={handleChange}\n                filterOptions={filterOptions}\n                options={suggestions}\n                getOptionLabel={(option) => {\n                    // e.g value selected with enter, right from the input\n                    if (typeof option === 'string') {\n                        return option\n                    }\n                    if (option.inputValue) {\n                        return option.inputValue\n                    }\n                    return option.label\n                }}\n                renderOption={(option) => option.label}\n                style={{ width: 300 }}\n                freeSolo\n                renderInput={(params) => (\n                    <TextField\n                        {...params}\n                        label=\"Free solo with text demo\"\n                        variant=\"outlined\"\n                        fullWidth\n                    />\n                )}\n            />\n\n            <Autocomplete\n                className=\"mb-4 w-300\"\n                options={suggestions}\n                getOptionLabel={(option) => option.label}\n                getOptionDisabled={(option) =>\n                    option === suggestions[0] || option === suggestions[2]\n                }\n                renderInput={(params) => (\n                    <TextField\n                        {...params}\n                        label=\"Disabled option\"\n                        variant=\"outlined\"\n                        fullWidth\n                    />\n                )}\n            />\n        </Fragment>\n    )\n}\n\nexport default AutocompleteCombo\n","// *https://www.registers.service.gov.uk/registers/country/use-the-api*\nimport fetch from 'cross-fetch'\nimport React from 'react'\nimport { TextField, CircularProgress } from '@material-ui/core'\nimport Autocomplete from '@material-ui/lab/Autocomplete'\n\nfunction sleep(delay = 0) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, delay)\n    })\n}\n\nexport default function AsyncAutocomplete() {\n    const [open, setOpen] = React.useState(false)\n    const [options, setOptions] = React.useState([])\n    const loading = open && options.length === 0\n\n    React.useEffect(() => {\n        let active = true\n\n        if (!loading) {\n            return undefined\n        }\n\n        ;(async () => {\n            const response = await fetch(\n                'https://country.register.gov.uk/records.json?page-size=5000'\n            )\n            await sleep(1e3) // For demo purposes.\n            const countries = await response.json()\n\n            if (active) {\n                setOptions(\n                    Object.keys(countries).map((key) => countries[key].item[0])\n                )\n            }\n        })()\n\n        return () => {\n            active = false\n        }\n    }, [loading])\n\n    React.useEffect(() => {\n        if (!open) {\n            setOptions([])\n        }\n    }, [open])\n\n    return (\n        <Autocomplete\n            id=\"asynchronous-demo\"\n            className=\"w-300\"\n            open={open}\n            onOpen={() => {\n                setOpen(true)\n            }}\n            onClose={() => {\n                setOpen(false)\n            }}\n            getOptionSelected={(option, value) => option.name === value.name}\n            getOptionLabel={(option) => option.name}\n            options={options}\n            loading={loading}\n            renderInput={(params) => (\n                <TextField\n                    {...params}\n                    label=\"Asynchronous\"\n                    fullWidth\n                    variant=\"outlined\"\n                    InputProps={{\n                        ...params.InputProps,\n                        endAdornment: (\n                            <React.Fragment>\n                                {loading ? (\n                                    <CircularProgress\n                                        color=\"inherit\"\n                                        size={20}\n                                    />\n                                ) : null}\n                                {params.InputProps.endAdornment}\n                            </React.Fragment>\n                        ),\n                    }}\n                />\n            )}\n        />\n    )\n}\n","import React from 'react'\nimport Chip from '@material-ui/core/Chip'\nimport Autocomplete from '@material-ui/lab/Autocomplete'\nimport { makeStyles } from '@material-ui/core/styles'\nimport TextField from '@material-ui/core/TextField'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: 500,\n        '& > * + *': {\n            marginTop: theme.spacing(3),\n        },\n    },\n}))\n\nconst BadgeAutocomplete = () => {\n    const classes = useStyles()\n\n    return (\n        <div className={classes.root}>\n            <Autocomplete\n                multiple\n                id=\"tags-standard\"\n                options={top100Films}\n                getOptionLabel={(option) => option.title}\n                defaultValue={[top100Films[13]]}\n                renderInput={(params) => (\n                    <TextField\n                        {...params}\n                        variant=\"standard\"\n                        label=\"Multiple values\"\n                        placeholder=\"Favorites\"\n                        fullWidth\n                    />\n                )}\n            />\n            <Autocomplete\n                multiple\n                id=\"tags-outlined\"\n                options={top100Films}\n                getOptionLabel={(option) => option.title}\n                defaultValue={[top100Films[13]]}\n                filterSelectedOptions\n                renderInput={(params) => (\n                    <TextField\n                        {...params}\n                        variant=\"outlined\"\n                        label=\"filterSelectedOptions\"\n                        placeholder=\"Favorites\"\n                        fullWidth\n                    />\n                )}\n            />\n            <Autocomplete\n                multiple\n                id=\"tags-filled\"\n                options={top100Films.map((option) => option.title)}\n                defaultValue={[top100Films[13].title]}\n                freeSolo\n                renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                        <Chip\n                            variant=\"outlined\"\n                            label={option}\n                            {...getTagProps({ index })}\n                        />\n                    ))\n                }\n                renderInput={(params) => (\n                    <TextField\n                        {...params}\n                        variant=\"filled\"\n                        label=\"freeSolo\"\n                        placeholder=\"Favorites\"\n                        fullWidth\n                    />\n                )}\n            />\n        </div>\n    )\n}\n\nexport default BadgeAutocomplete\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films = [\n    { title: 'The Shawshank Redemption', year: 1994 },\n    { title: 'The Godfather', year: 1972 },\n    { title: 'The Godfather: Part II', year: 1974 },\n    { title: 'The Dark Knight', year: 2008 },\n    { title: '12 Angry Men', year: 1957 },\n    { title: \"Schindler's List\", year: 1993 },\n    { title: 'Pulp Fiction', year: 1994 },\n    { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\n    { title: 'The Good, the Bad and the Ugly', year: 1966 },\n    { title: 'Fight Club', year: 1999 },\n    { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\n    { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\n    { title: 'Forrest Gump', year: 1994 },\n    { title: 'Inception', year: 2010 },\n    { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\n    { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n    { title: 'Goodfellas', year: 1990 },\n    { title: 'The Matrix', year: 1999 },\n    { title: 'Seven Samurai', year: 1954 },\n    { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\n    { title: 'City of God', year: 2002 },\n    { title: 'Se7en', year: 1995 },\n    { title: 'The Silence of the Lambs', year: 1991 },\n    { title: \"It's a Wonderful Life\", year: 1946 },\n    { title: 'Life Is Beautiful', year: 1997 },\n    { title: 'The Usual Suspects', year: 1995 },\n    { title: 'Léon: The Professional', year: 1994 },\n    { title: 'Spirited Away', year: 2001 },\n    { title: 'Saving Private Ryan', year: 1998 },\n    { title: 'Once Upon a Time in the West', year: 1968 },\n    { title: 'American History X', year: 1998 },\n    { title: 'Interstellar', year: 2014 },\n    { title: 'Casablanca', year: 1942 },\n    { title: 'City Lights', year: 1931 },\n    { title: 'Psycho', year: 1960 },\n    { title: 'The Green Mile', year: 1999 },\n    { title: 'The Intouchables', year: 2011 },\n    { title: 'Modern Times', year: 1936 },\n    { title: 'Raiders of the Lost Ark', year: 1981 },\n    { title: 'Rear Window', year: 1954 },\n    { title: 'The Pianist', year: 2002 },\n    { title: 'The Departed', year: 2006 },\n    { title: 'Terminator 2: Judgment Day', year: 1991 },\n    { title: 'Back to the Future', year: 1985 },\n    { title: 'Whiplash', year: 2014 },\n    { title: 'Gladiator', year: 2000 },\n    { title: 'Memento', year: 2000 },\n    { title: 'The Prestige', year: 2006 },\n    { title: 'The Lion King', year: 1994 },\n    { title: 'Apocalypse Now', year: 1979 },\n    { title: 'Alien', year: 1979 },\n    { title: 'Sunset Boulevard', year: 1950 },\n    {\n        title:\n            'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n        year: 1964,\n    },\n    { title: 'The Great Dictator', year: 1940 },\n    { title: 'Cinema Paradiso', year: 1988 },\n    { title: 'The Lives of Others', year: 2006 },\n    { title: 'Grave of the Fireflies', year: 1988 },\n    { title: 'Paths of Glory', year: 1957 },\n    { title: 'Django Unchained', year: 2012 },\n    { title: 'The Shining', year: 1980 },\n    { title: 'WALL·E', year: 2008 },\n    { title: 'American Beauty', year: 1999 },\n    { title: 'The Dark Knight Rises', year: 2012 },\n    { title: 'Princess Mononoke', year: 1997 },\n    { title: 'Aliens', year: 1986 },\n    { title: 'Oldboy', year: 2003 },\n    { title: 'Once Upon a Time in America', year: 1984 },\n    { title: 'Witness for the Prosecution', year: 1957 },\n    { title: 'Das Boot', year: 1981 },\n    { title: 'Citizen Kane', year: 1941 },\n    { title: 'North by Northwest', year: 1959 },\n    { title: 'Vertigo', year: 1958 },\n    { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\n    { title: 'Reservoir Dogs', year: 1992 },\n    { title: 'Braveheart', year: 1995 },\n    { title: 'M', year: 1931 },\n    { title: 'Requiem for a Dream', year: 2000 },\n    { title: 'Amélie', year: 2001 },\n    { title: 'A Clockwork Orange', year: 1971 },\n    { title: 'Like Stars on Earth', year: 2007 },\n    { title: 'Taxi Driver', year: 1976 },\n    { title: 'Lawrence of Arabia', year: 1962 },\n    { title: 'Double Indemnity', year: 1944 },\n    { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\n    { title: 'Amadeus', year: 1984 },\n    { title: 'To Kill a Mockingbird', year: 1962 },\n    { title: 'Toy Story 3', year: 2010 },\n    { title: 'Logan', year: 2017 },\n    { title: 'Full Metal Jacket', year: 1987 },\n    { title: 'Dangal', year: 2016 },\n    { title: 'The Sting', year: 1973 },\n    { title: '2001: A Space Odyssey', year: 1968 },\n    { title: \"Singin' in the Rain\", year: 1952 },\n    { title: 'Toy Story', year: 1995 },\n    { title: 'Bicycle Thieves', year: 1948 },\n    { title: 'The Kid', year: 1921 },\n    { title: 'Inglourious Basterds', year: 2009 },\n    { title: 'Snatch', year: 2000 },\n    { title: '3 Idiots', year: 2009 },\n    { title: 'Monty Python and the Holy Grail', year: 1975 },\n]\n","import React from 'react'\nimport { Breadcrumb, SimpleCard } from 'app/components'\nimport AutocompleteCombo from './AutocompleteCombo'\nimport AsyncAutocomplete from './AsyncAutocomplete'\nimport BadgeAutocomplete from './BadgeAutocomplete'\n\nconst AppAutoComplete = () => {\n    return (\n        <div className=\"m-sm-30\">\n            <div className=\"mb-sm-30\">\n                <Breadcrumb\n                    routeSegments={[\n                        { name: 'Material', path: '/material' },\n                        { name: 'Autocomplete' },\n                    ]}\n                />\n            </div>\n            <SimpleCard title=\"autocomplete combo\">\n                <AutocompleteCombo />\n            </SimpleCard>\n            <div className=\"py-3\" />\n            <SimpleCard title=\"Asyncronous Autocomplete\">\n                <AsyncAutocomplete></AsyncAutocomplete>\n            </SimpleCard>\n            <div className=\"py-3\" />\n            <SimpleCard title=\"Asyncronous Autocomplete\">\n                <BadgeAutocomplete></BadgeAutocomplete>\n            </SimpleCard>\n            {/* <div className=\"py-3\" />\n      <SimpleCard title=\"Google Location\">\n        <LocationAutocomplete></LocationAutocomplete>\n      </SimpleCard> */}\n        </div>\n    )\n}\n\nexport default AppAutoComplete\n"],"sourceRoot":""}